// üïí Timestamp: 2025-07-18T16:45:00Z
// üîß Only change: Send combinedAnswer (== responseText) to clientEmail using Mailjet if provided
// üîß Changes:
// - Removed assumption that Xero is relevant in fallback prompt
// - Updated fallback to focus only on UK tax law, FCA compliance, and UK GAAP (FRC standards)
// - Retained hybrid output: indexed answer followed by OpenAI fallback answer
// - ‚úÖ Added ISO timestamp (UK time) at top of response
const VERSION = '2025-07-17T16:19:00Z'; // üïí ISO timestamp of last deployment
console.log(`üöÄ Running AI assistant version: ${VERSION}`);
import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';
import { OpenAI } from 'openai';
import { loadIndex, searchIndex } from './vector_store.js';

const app = express();
app.use(cors());
app.use(express.json());

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// Load vector index once at startup
let index = [];
(async () => {
  index = await loadIndex();
  console.log("üì¶ Loaded vector index with", index.length, "chunks");
})();

app.options('/ask', cors(), (req, res) => {
  res.sendStatus(204);
});

app.post('/ask', async (req, res) => {
  const question = req.body.question || req.body.query;
  const email = req.body.email?.trim(); // ‚úÖ NEW: clientEmail from Wix

  if (!question) {
    return res.status(400).json({ error: 'Missing question' });
  }

  try {
    // üîç Embed and search index
    const embeddingRes = await openai.embeddings.create({
      model: 'text-embedding-3-small',
      input: question
    });
    const queryEmbedding = embeddingRes.data[0].embedding;

    const topChunks = await searchIndex(queryEmbedding, 3);
    const contextText = topChunks
      .map(c => c.text?.trim())
      .filter(t => t && t.length > 50)
      .join('\n\n');

    let indexAnswer = '';
    let openaiAnswer = '';

    // üìò Index-based GPT answer if available
    if (contextText && contextText.length > 50) {
      const gptRes = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'system',
              content: 'Answer using only the following source material:\n\n' + contextText
            },
            {
              role: 'user',
              content: question
            }
          ],
          temperature: 0.3
        })
      });

      const gptData = await gptRes.json();
      indexAnswer = gptData.choices?.[0]?.message?.content || '';
    }

    // üß† Always provide fallback OpenAI perspective (UK compliance only)
    const fallbackPrompt = `
You are a UK chartered accountant and compliance expert.
Only answer based on:
- UK tax law and regulatory obligations
- UK FCA compliance standards
- Financial Reporting Council (FRC) and UK GAAP standards

Do not reference international or US law or practice.
If the question falls outside the scope of UK tax, FCA, or GAAP guidance, respond with:
"This question falls outside the scope of UK tax, FCA, or GAAP standards."

Question: "${question}"
`;

    const fallbackData = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        { role: 'system', content: 'You are a UK accounting compliance advisor.' },
        { role: 'user', content: fallbackPrompt }
      ],
      temperature: 0.2
    });

    openaiAnswer = fallbackData.choices?.[0]?.message?.content || 'No additional answer.';

    // üïí Generate London time ISO timestamp
    const londonTime = new Date().toLocaleString('sv-SE', {
      timeZone: 'Europe/London',
      hour12: false
    }).replace(' ', 'T');

    // üßæ Combine output for user
    const combinedAnswer =
      `üïí Generated at (UK time): ${londonTime}\n` +
      `üìò *Answer from our indexed document archive:*\n${indexAnswer || 'No answer found.'}\n---\n` +
      `üß† *Additional UK compliance context generated by OpenAI:*\n${openaiAnswer}`;

    // ‚úâÔ∏è NEW: Send combinedAnswer to clientEmail if valid
    if (email && email.includes('@')) {
      try {
        const mailjetRes = await fetch("https://api.mailjet.com/v3.1/send", {
          method: "POST",
          headers: {
            "Authorization": "Basic " + Buffer.from(`${process.env.MJ_APIKEY_PUBLIC}:${process.env.MJ_APIKEY_PRIVATE}`).toString("base64"),
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            Messages: [
              {
                From: { Email: "noreply@securemaildrop.uk", Name: "Secure Maildrop" },
                To: [{ Email: email, Name: "Client" }],
                Subject: "Your AI Response",
                TextPart: combinedAnswer,
               // HTMLPart: `<pre>${combinedAnswer}</pre>`
               // HTMLPart: combinedAnswer.split('\n').join('<br>')
                HTMLPart: combinedAnswer.split('\n').join('<br>') + '<br><br><em>Email:accounts@justresults.co for a free consultation with Just Results Bookkeeping</em>'
              }
            ]
          })
        });

        const mailjetData = await mailjetRes.json();
        console.log("üì® Mailjet response:", mailjetRes.status, mailjetData);
      } catch (err) {
        console.error("‚ùå Mailjet send failed:", err.message);
      }
    }

    res.json({
      answer: combinedAnswer,
      fromIndex: !!indexAnswer,
      sources: topChunks
    });

  } catch (err) {
    console.error('‚ùå GPT error:', err);
    res.status(500).json({ error: 'Something went wrong.' });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üü¢ Server running on port ${PORT}`));